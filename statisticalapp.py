# -*- coding: utf-8 -*-
"""statisticalapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dKvk7kZzZBh5VAysbV3nMHmzcnq1-TuX
"""

import pandas as pd
import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import seaborn as sns

class StatisticalDataAnalyzer:
    def __init__(self, file_path):
        self.data = self.load_data(file_path)

    def load_data(self, file_path):
        try:
            data = pd.read_csv(file_path)
            print("Data loaded successfully.")
            return data
        except Exception as e:
            print(f"Error loading data: {e}")
            return None

    def display_summary(self):
        if self.data is not None:
            print("\n--- Dataset Summary ---")
            print(self.data.info())
            print("\n--- Descriptive Statistics ---")
            print(self.data.describe())
        else:
            print("No data available to summarize.")

    def visualize_data(self, column):
        if self.data is not None and column in self.data.columns:
            plt.figure(figsize=(8, 6))
            sns.histplot(self.data[column].dropna(), kde=True, bins=30)
            plt.title(f"Distribution of {column}")
            plt.xlabel(column)
            plt.ylabel("Frequency")
            plt.show()
        else:
            print(f"Column '{column}' not found in the dataset.")

    def perform_hypothesis_test(self, column, mu):
        if self.data is not None and column in self.data.columns:
            data = self.data[column].dropna()
            t_stat, p_value = stats.ttest_1samp(data, mu)
            print("\n--- Hypothesis Test Results ---")
            print(f"T-statistic: {t_stat:.4f}")
            print(f"P-value: {p_value:.4f}")
            if p_value < 0.05:
                print(f"Reject the null hypothesis. The mean of {column} is significantly different from {mu}.")
            else:
                print(f"Fail to reject the null hypothesis. The mean of {column} is not significantly different from {mu}.")
        else:
            print(f"Column '{column}' not found in the dataset.")

    def visualize_correlation_matrix(self):
        if self.data is not None:
            plt.figure(figsize=(10, 8))
            correlation_matrix = self.data.corr()
            sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f")
            plt.title("Correlation Matrix")
            plt.show()
        else:
            print("No data available to compute correlation matrix.")

if __name__ == "__main__":
    print("Welcome to the Statistical Data Analyzer!")
    file_path = input("Enter the path to your CSV file: ").strip()

    analyzer = StatisticalDataAnalyzer(file_path)

    while True:
        print("\nOptions:")
        print("1. Display dataset summary")
        print("2. Visualize data distribution")
        print("3. Perform hypothesis test")
        print("4. Visualize correlation matrix")
        print("5. Exit")

        choice = input("Enter your choice: ").strip()

        if choice == "1":
            analyzer.display_summary()
        elif choice == "2":
            column = input("Enter the column name to visualize: ").strip()
            analyzer.visualize_data(column)
        elif choice == "3":
            column = input("Enter the column name for the hypothesis test: ").strip()
            mu = float(input("Enter the hypothesized mean: "))
            analyzer.perform_hypothesis_test(column, mu)
        elif choice == "4":
            analyzer.visualize_correlation_matrix()
        elif choice == "5":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Please try again.")